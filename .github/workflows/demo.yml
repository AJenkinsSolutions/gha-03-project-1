name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
        # DEPENDENCY CACHING
      - name: cache dependencies
        uses: actions/cache@v3
        with:
          # This is the path node uses to store its dependencies
          path: ~/.npm
          # is used to retreive the cache in the future
          # We need to provide a dynamic name that will change onces the cache is discarded
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
          # So basiclly if the /.npm folder doesnt exist it will run the npm ci command, but if does it will just use that folder
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    # Sets an output for the overall job
    outputs:
      script-file: ${{steps.publish.outputs.script-file}}
    steps:
      - name: Get code
        uses: actions/checkout@v3
        # DEPENDENCY CACHING
      - name: cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
        # Job Ouput: We want the file name for the js file in the dist/assests folder
        # We want this file so other jobs can use it
      - name: Publish JS Filename
        id: publish
      # Linux comand: outputs the name of file 
      # The '{}' placeholder will contain the js file name
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
        # Uploading Artifacts 
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
          # how we store multiple files
          # * if you have multi line commands use the pipe symbol '|'
          # path: | 
          #   dist
          #   # package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
      # Download the artifacts from the build step manually
        uses: actions/download-artifact@v3
      # Specify where the artifacts are coming from in the 'name'
        with: 
          name: dist-files
      - name: Output Contents
        run: ls
      - name: Output filename
      # 'needs' Contains the outputs of all jobs that are defined as a dependency of the current job. 
      # we will out put the name of this file here
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
